{"version":3,"sources":["components/FavoriteCity/svg/delete.svg","components/IconBar/svg/update.svg","components/IconBar/svg/err.svg","utils/getGeoPosition.js","utils/getLocalState.js","utils/saveToLocalStorage.js","utils/weatherDataProcessing.js","utils/getWeather.js","actions/index.js","components/CurrentCity/CurrentCity.js","components/FavoriteCities/FavoriteCities.js","components/FavoriteCity/FavoriteCity.js","components/IconBar/IconBar.js","components/Input/Input.js","components/Spinner/Spinner.js","components/WeatherInfo/WeatherInfo.js","containers/CurrentCityContainer/CurrentCityContainer.js","containers/FavoriteCitiesContainer/FavoriteCitiesContainer.js","containers/FavoriteCityContainer/FavoriteCityContainer.js","containers/IconBarContainer/IconBarContainer.js","containers/InputContainer/InputContainer.js","components/Page/Page.js","App.js","store/storeTemplate.js","store/initialState.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","getGeoPosition","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","getLocalState","state","JSON","parse","localStorage","getItem","citiesQueue","cities","map","city","saveToLocalStorage","citiesList","setItem","stringify","dataDestructuring","weather","name","main","temp","humidity","pressure","icon","speed","wind","coord","toFixed","substr","lon","lat","apiUrl","getWeatherByCoord","APIkey","axios","get","params","appid","getWeatherByCityName","cityName","q","updateLoadingStatus","loading","type","cityDelete","index","cityRequest","cityLoaded","cityError","locRequested","isGeoPosAvailable","locLoaded","locError","cityByCoordsLoaded","addCityToQueue","deleteCityFromQueue","addErrorMessage","message","clearErrorMessage","CurrentCity","error","className","src","alt","FavoriteCities","el","i","FavoriteCityContainer","key","FavoriteCity","deleteCity","deleteIcon","onClick","IconBar","errorMessage","updIcon","errIcon","Input","handleChange","inputValue","clickButton","onChange","value","Spinner","WeatherInfo","connect","cityByCoords","useState","setLoading","useEffect","setInputValue","event","target","preventDefault","Page","IconBarContainer","FavoriteCitiesContainer","CurrentCityContainer","mapDispatchToProps","actions","props","apiKey","cityDefault","utils","successGeoLocCallback","pos","coords","latitude","longitude","then","res","data","catch","err","errorGeoLocCallback","length","storeTemplate","localState","initialState","reducer","action","push","shift","splice","inputField","filter","item","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61c22064.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.f8c70af5.svg\";","module.exports = __webpack_public_path__ + \"static/media/update.5befe2b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/err.7917b4f1.svg\";","const getGeoPosition = (successCallback, errorCallback) => {\r\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n};\r\n\r\nexport default getGeoPosition;","const getLocalState = () => {\r\n  const state = JSON.parse( localStorage.getItem('state') );\r\n  if (state === null)\r\n    return null;\r\n  const citiesQueue = state.cities.map( (city) => city.city );\r\n  return { citiesQueue };\r\n};\r\n\r\nexport default getLocalState;","const saveToLocalStorage = ( { cities } ) => {\r\n  const citiesList = cities.map(( city ) => ({ city: city.city }));\r\n  localStorage.setItem('state', JSON.stringify({cities: citiesList}));\r\n};\r\n\r\nexport default saveToLocalStorage;","const dataDestructuring = weather => {\r\n  let {\r\n    name,\r\n    main: { temp, humidity, pressure },\r\n    weather: { 0: { main, icon } },\r\n    wind: { speed },\r\n    coord\r\n  } = weather;\r\n\r\n  temp = (temp - 273.15).toFixed(0);\r\n  icon = icon.substr(0, 2);\r\n\r\n  return {\r\n    city: name,\r\n    temp,\r\n    icon,\r\n    main,\r\n    pressure,\r\n    humidity,\r\n    wind: speed,\r\n    lon: coord.lon,\r\n    lat: coord.lat\r\n  }\r\n};\r\n\r\nexport default dataDestructuring;","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\n\r\nconst getWeatherByCoord = (lat, lon, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      appid: APIkey,\r\n      lat: lat,\r\n      lon: lon\r\n    }\r\n  });\r\n\r\nconst getWeatherByCityName = (cityName, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      q: cityName,\r\n      appid: APIkey\r\n    }\r\n  });\r\n\r\n\r\nexport {\r\n  getWeatherByCoord,\r\n  getWeatherByCityName\r\n};","const updateLoadingStatus = (loading) => ({\r\n  type: 'UPDATE_LOADING_STATUS',\r\n  loading\r\n});\r\n\r\nconst cityDelete = (index) => ({\r\n  type: 'DELETE_CITY',\r\n  index\r\n});\r\n\r\nconst cityRequest = () => ({\r\n  type: 'FETCH_CITY_REQUEST'\r\n});\r\n\r\nconst cityLoaded = (city) => ({\r\n  type: 'FETCH_CITY_SUCCESS',\r\n  city\r\n});\r\n\r\nconst cityError = (city = '') => ({\r\n  type: 'FETCH_CITY_ERROR',\r\n  city\r\n});\r\n\r\nconst locRequested = () => ({\r\n  type: 'FETCH_GEOLOCATION_REQUEST',\r\n  isGeoPosAvailable: null\r\n});\r\n\r\nconst locLoaded = () => ({\r\n  type: 'FETCH_GEOLOCATION_SUCCESS',\r\n  isGeoPosAvailable: true\r\n});\r\n\r\nconst locError = () => ({\r\n  type: 'FETCH_GEOLOCATION_FAILURE',\r\n  isGeoPosAvailable: false\r\n});\r\n\r\nconst cityByCoordsLoaded = (city) => ({\r\n  type: 'FETCH_CITY_BY_COORDS_SUCCESS',\r\n  city\r\n});\r\n\r\nconst addCityToQueue = (city) => ({\r\n  type: 'ADD_CITY_TO_QUEUE',\r\n  city\r\n});\r\n\r\nconst deleteCityFromQueue = () => ({\r\n  type: 'DELETE_CITY_FROM_QUEUE'\r\n});\r\n\r\nconst addErrorMessage = (message) => ({\r\n  type: 'ADD_ERROR_MESSAGE',\r\n  message\r\n});\r\n\r\nconst clearErrorMessage = () => ({\r\n  type: 'CLEAR_ERROR_MESSAGE'\r\n});\r\n\r\n\r\nexport {\r\n  cityRequest,\r\n  cityLoaded,\r\n  locError,\r\n  locLoaded,\r\n  locRequested,\r\n  cityDelete,\r\n  updateLoadingStatus,\r\n  cityByCoordsLoaded,\r\n  cityError,\r\n  addCityToQueue,\r\n  deleteCityFromQueue,\r\n  addErrorMessage,\r\n  clearErrorMessage\r\n};","import React  from 'react';\r\nimport './CurrentCity.scss';\r\nimport { Spinner, WeatherInfo } from \"../\";\r\n\r\nconst CurrentCity = ({ city, loading }) => (\r\n  loading ?\r\n    <Spinner /> :\r\n    city.error ?\r\n      <div>{city.error}</div> :\r\n      <div className=\"current-city\">\r\n        <div className=\"current-city__name\">\r\n          <div className=\"current-city__city-name\">{city.city}</div>\r\n          <div className=\"current-city__weather\">{city.main}</div>\r\n        </div>\r\n        <div className=\"current-city__temp\">\r\n          <div className=\"current-city__weather-icon\">\r\n            <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\" />\r\n          </div>\r\n          <div className=\"current-city__temperature\">{city.temp}°</div>\r\n        </div>\r\n        <div className=\"current-city__info\">\r\n          <WeatherInfo {...city} />\r\n        </div>\r\n      </div>\r\n);\r\n\r\nexport default CurrentCity;","import React from 'react';\r\nimport './FavoriteCities.scss';\r\nimport { FavoriteCityContainer } from \"../../containers\";\r\n\r\nconst FavoriteCities = ({ cities }) => {\r\n  return (\r\n    <div className=\"city-list\">\r\n      {cities.map((el, i) => (<FavoriteCityContainer city={el} key={i} i={i}/>))}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FavoriteCities;","import React from 'react';\r\nimport './FavoriteCity.scss';\r\nimport deleteIcon from './svg/delete.svg';\r\nimport { Spinner, WeatherInfo } from \"../\";\r\n\r\nconst FavoriteCity = ({ city, loading, deleteCity }) => {\r\n  return (\r\n    <div className=\"item\">\r\n      {loading ?\r\n        <Spinner/> :\r\n        <div className=\"item-content\">\r\n          <div className=\"item-header\">\r\n            <div className=\"item-header-city\">{city.city}</div>\r\n            <img className=\"del-icon\" src={deleteIcon} alt=\"\" onClick={deleteCity} />\r\n          </div>\r\n          <div className=\"item-body\">\r\n            <div className=\"item-body-left\">\r\n              <div className=\"item-temperature\">{city.temp}°</div>\r\n              <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\" />\r\n            </div>\r\n            <WeatherInfo {...city} />\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FavoriteCity;","import React from 'react';\r\nimport './IconBar.scss';\r\nimport updIcon from './svg/update.svg';\r\nimport errIcon from './svg/err.svg';\r\n\r\nconst IconBar = ({ locRequested, errorMessage }) => {\r\n  return (\r\n    <div className=\"icon-bar\">\r\n      <div className=\"icons\">\r\n        <img className=\"navIcon\" src={updIcon} alt=\"\"  onClick={() => locRequested()} />\r\n        {errorMessage ? <img className=\"errIcon\" src={errIcon} alt=\"\" /> : null}\r\n        {errorMessage ? <div className=\"error-text\">{errorMessage}</div> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default IconBar;","import React from 'react';\r\nimport './Input.scss';\r\n\r\nconst Input = ({ handleChange, inputValue, clickButton }) => (\r\n  <div className=\"search\">\r\n    <form className=\"input-form\">\r\n      <input\r\n        className=\"input-field\"\r\n        onChange={handleChange}\r\n        value={ inputValue }\r\n      />\r\n      <button\r\n        className=\"search-button\"\r\n        onClick={clickButton}\r\n      >\r\n        Search\r\n      </button>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () =>\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-eclipse\">\r\n      <div/>\r\n    </div>\r\n  </div>;\r\n\r\nexport default Spinner;","import React from 'react'\r\nimport './WeatherInfo.scss'\r\n\r\nconst WeatherInfo = ({ pressure, wind, humidity, lat, lon}) => {\r\n  return (\r\n    <div className=\"info-block\">\r\n      <div className=\"item-info\">Pressure: {pressure} hPA</div>\r\n      <div className=\"item-info\">Wind: {wind} m/s</div>\r\n      <div className=\"item-info\">Humidity: {humidity}%</div>\r\n      <div className=\"item-info\">Coord: [{lat}, {lon}]</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;","import { connect } from 'react-redux';\r\nimport { CurrentCity } from \"../../components\";\r\n\r\nconst mapStateToProps = ({ loading, cityByCoords }) => ({\r\n  city: cityByCoords,\r\n  loading\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentCity);","import { connect } from 'react-redux';\r\nimport { FavoriteCities } from \"../../components\";\r\n\r\nconst mapStateToProps = ({ cities }) => ({\r\n  cities\r\n});\r\n\r\nexport default connect(mapStateToProps)(FavoriteCities);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { cityDelete } from \"../../actions\";\r\nimport { FavoriteCity } from \"../../components\";\r\n\r\nconst CityListItem = ({ city, i, cityDelete }) => {\r\n  const [ loading, setLoading ] = useState(true);\r\n  const deleteCity = () => cityDelete(i);\r\n\r\n  useEffect(() => {\r\n    if(city && JSON.stringify(city) !== '{}'){\r\n      setLoading(false);}\r\n    else\r\n      setLoading(true);\r\n  }, [city]);\r\n\r\n  return <FavoriteCity\r\n    city={city}\r\n    loading={loading}\r\n    deleteCity={deleteCity}\r\n  />;\r\n};\r\n\r\nexport default connect(null, { cityDelete })(CityListItem);","import { connect } from \"react-redux\";\r\nimport { locRequested } from \"../../actions\";\r\nimport { IconBar } from \"../../components\";\r\n\r\nconst mapStateToProps = ({errorMessage}) => ({errorMessage});\r\n\r\nexport default connect(mapStateToProps, { locRequested })(IconBar);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addCityToQueue } from \"../../actions\";\r\nimport { Input } from \"../../components\";\r\n\r\nconst InputContainer = ({ addCityToQueue }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleChange = (event) =>\r\n    setInputValue(event.target.value);\r\n\r\n  const clickButton = (event) =>{\r\n    event.preventDefault();\r\n    setInputValue('');\r\n    if (inputValue !== '')\r\n      addCityToQueue(inputValue);\r\n  };\r\n\r\n  return <Input inputValue={inputValue} handleChange={handleChange} clickButton={clickButton} />;\r\n};\r\n\r\nexport default connect( null, { addCityToQueue } )( InputContainer );","import React from 'react';\r\nimport './Page.scss';\r\nimport {\r\n  IconBarContainer,\r\n  InputContainer,\r\n  FavoriteCitiesContainer,\r\n  CurrentCityContainer\r\n} from '../../containers'\r\n\r\nconst Page = () => (\r\n  <div className=\"page\">\r\n    <InputContainer/>\r\n    <IconBarContainer/>\r\n    <FavoriteCitiesContainer/>\r\n    <CurrentCityContainer/>\r\n  </div>\r\n);\r\n\r\nexport default Page;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as utils from \"./utils\";\r\nimport * as actions from './actions';\r\nimport Page from './components/Page'\r\n\r\nconst App = (props) => {\r\n  const {deleteCityFromQueue, addErrorMessage, clearErrorMessage, cityError, cityLoaded, cityRequest, locLoaded, locError, cityByCoordsLoaded, updateLoadingStatus, state} = props;\r\n  const { apiKey, cityDefault, isGeoPosAvailable, cityByCoords, cities, citiesQueue } = state;\r\n  const { getWeatherByCityName, getWeatherByCoord, dataDestructuring, getGeoPosition, saveToLocalStorage } = utils;\r\n\r\n  const successGeoLocCallback = (pos) => {\r\n    const lat = pos.coords.latitude;\r\n    const lon = pos.coords.longitude;\r\n    locLoaded();\r\n    getWeatherByCoord(lat, lon, apiKey)\r\n      .then((res) => {\r\n        cityByCoordsLoaded(dataDestructuring(res.data));\r\n      })\r\n      .catch((err) => {\r\n        cityByCoordsLoaded({error: err.message});\r\n      });\r\n  };\r\n\r\n  const errorGeoLocCallback = () => {\r\n    locError();\r\n    getWeatherByCityName(cityDefault, apiKey)\r\n      .then((res) => {\r\n        cityByCoordsLoaded(dataDestructuring(res.data));\r\n      })\r\n      .catch((err) => {\r\n        cityByCoordsLoaded({error: err.message});\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(citiesQueue.length > 0){\r\n      if(cities.length < 4) {\r\n        cityRequest();\r\n        getWeatherByCityName(citiesQueue[0], apiKey)\r\n          .then((res) => {\r\n            cityLoaded(dataDestructuring(res.data));\r\n            clearErrorMessage();\r\n          })\r\n          .catch((err) => {\r\n            cityError();\r\n            addErrorMessage(err.message);\r\n          });\r\n        deleteCityFromQueue();\r\n      } else {\r\n        deleteCityFromQueue();\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(isGeoPosAvailable === null)\r\n      getGeoPosition(successGeoLocCallback, errorGeoLocCallback);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(cityByCoords && JSON.stringify(cityByCoords) !== '{}')\r\n      updateLoadingStatus(false);\r\n  }, [cityByCoords, updateLoadingStatus]);\r\n\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(state);\r\n  });\r\n\r\n  return <Page/>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({state});\r\n\r\nconst mapDispatchToProps = {...actions};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const storeTemplate = {\r\n  apiKey: '9c2f796d45e91e5c01a2ae26f1613625',\r\n  citiesQueue: [],\r\n  cities: [],\r\n  loading: true,\r\n  isGeoPosAvailable: null,\r\n  cityDefault: 'Moscow',\r\n  cityByCoords: {},\r\n  errorMessage: null\r\n};\r\n\r\nexport default storeTemplate;","import { getLocalState } from \"../utils\";\r\nimport storeTemplate from \"./storeTemplate\";\r\n\r\nconst localState = getLocalState();\r\n\r\nconst initialState =\r\n  localState\r\n    ? { ...storeTemplate, ...localState }\r\n    : storeTemplate;\r\n\r\nexport default initialState;","import initialState from '../store/initialState'\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'ADD_CITY_TO_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.push(action.city);\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'DELETE_CITY_FROM_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.shift();\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'UPDATE_LOADING_STATUS':\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      };\r\n    case 'DELETE_CITY':{\r\n      const cities = [...state.cities];\r\n      cities.splice(action.index, 1);\r\n      return {\r\n        ...state,\r\n        cities,\r\n        inputField: null\r\n      };\r\n    }\r\n    case 'FETCH_CITY_REQUEST':{\r\n      const cities = [...state.cities];\r\n      cities.push({});\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_ERROR':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities.splice(i, 1);\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_SUCCESS':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities[i] = action.city;\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_GEOLOCATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable,\r\n        loading: true\r\n      };\r\n    case 'FETCH_GEOLOCATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_GEOLOCATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_CITY_BY_COORDS_SUCCESS':{\r\n      return {\r\n        ...state,\r\n        cityByCoords: action.city\r\n      };\r\n    }\r\n    case 'ADD_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: action.message\r\n      };\r\n    case 'CLEAR_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './store/store';\r\n\r\nimport './index.scss'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}