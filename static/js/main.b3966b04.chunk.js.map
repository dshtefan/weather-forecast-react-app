{"version":3,"sources":["components/IconBar/svg/update.svg","components/IconBar/svg/err.svg","components/FavoriteCity/svg/delete.svg","components/WeatherIcon/icons/01.svg","components/WeatherIcon/icons/02.svg","components/WeatherIcon/icons/03.svg","components/WeatherIcon/icons/04.svg","components/WeatherIcon/icons/09.svg","components/WeatherIcon/icons/10.svg","components/WeatherIcon/icons/11.svg","components/WeatherIcon/icons/13.svg","components/WeatherIcon/icons/50.svg","utils/getGeoPosition.js","utils/getLocalState.js","utils/saveToLocalStorage.js","utils/weatherDataProcessing.js","utils/getWeather.js","actions/index.js","components/Input/Input.js","containers/InputContainer/InputContainer.js","components/IconBar/IconBar.js","containers/IconBarContainer/IconBarContainer.js","components/Spinner/Spinner.js","components/WeatherIcon/WeatherIcon.js","components/WeatherInfo/WeatherInfo.js","components/FavoriteCity/FavoriteCity.js","containers/FavoriteCityContainer/FavoriteCityContainer.js","components/FavoriteCities/FavoriteCities.js","containers/FavoriteCitiesContainer/FavoriteCitiesContainer.js","components/CurrentCity/CurrentCity.js","containers/CurrentCityContainer/CurrentCityContainer.js","components/Page/Page.js","App.js","store/storeTemplate.js","store/initialState.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","getGeoPosition","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","getLocalState","state","JSON","parse","localStorage","getItem","citiesQueue","cities","map","city","saveToLocalStorage","citiesList","setItem","stringify","dataDestructuring","weather","name","main","temp","humidity","pressure","icon","speed","wind","coord","toFixed","substr","lon","lat","apiUrl","getWeatherByCoord","APIkey","axios","get","params","appid","getWeatherByCityName","cityName","q","updateLoadingStatus","loading","type","cityDelete","index","cityRequest","cityLoaded","cityError","locRequested","isGeoPosAvailable","locLoaded","locError","cityByCoordsLoaded","addCityToQueue","deleteCityFromQueue","addErrorMessage","message","clearErrorMessage","Input","handleChange","inputValue","clickButton","className","onChange","value","onClick","connect","useState","setInputValue","event","target","preventDefault","IconBar","errorMessage","src","updIcon","alt","errIcon","Spinner","WeatherIcon","createImg","iconNumber","icon01","icon02","icon03","icon04","icon09","icon10","icon11","icon13","icon50","WeatherInfo","FavoriteCity","deleteCity","deleteIcon","i","setLoading","useEffect","FavoriteCities","el","FavoriteCityContainer","key","CurrentCity","error","cityByCoords","Page","IconBarContainer","FavoriteCitiesContainer","CurrentCityContainer","mapDispatchToProps","actions","props","apiKey","cityDefault","utils","successGeoLocCallback","pos","coords","latitude","longitude","then","res","data","catch","err","errorGeoLocCallback","length","storeTemplate","localState","initialState","reducer","action","push","shift","splice","inputField","filter","item","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3966b04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/update.5befe2b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/err.7917b4f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.f8c70af5.svg\";","module.exports = __webpack_public_path__ + \"static/media/01.ec5ebc73.svg\";","module.exports = __webpack_public_path__ + \"static/media/02.fa87dd3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/03.fa87dd3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/04.1ae2e67e.svg\";","module.exports = __webpack_public_path__ + \"static/media/09.13f4dc7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/10.95294982.svg\";","module.exports = __webpack_public_path__ + \"static/media/11.9553928b.svg\";","module.exports = __webpack_public_path__ + \"static/media/13.1a903534.svg\";","module.exports = __webpack_public_path__ + \"static/media/50.bd76feac.svg\";","const getGeoPosition = (successCallback, errorCallback) => {\r\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n};\r\n\r\nexport default getGeoPosition;","const getLocalState = () => {\r\n  const state = JSON.parse( localStorage.getItem('state') );\r\n  if (state === null)\r\n    return null;\r\n  const citiesQueue = state.cities.map( (city) => city.city );\r\n  return { citiesQueue };\r\n};\r\n\r\nexport default getLocalState;","const saveToLocalStorage = ( { cities } ) => {\r\n  const citiesList = cities.map(( city ) => ({ city: city.city }));\r\n  localStorage.setItem('state', JSON.stringify({cities: citiesList}));\r\n};\r\n\r\nexport default saveToLocalStorage;","const dataDestructuring = weather => {\r\n  let {\r\n    name,\r\n    main: { temp, humidity, pressure },\r\n    weather: { 0: { main, icon } },\r\n    wind: { speed },\r\n    coord\r\n  } = weather;\r\n\r\n  temp = (temp - 273.15).toFixed(0);\r\n  icon = icon.substr(0, 2);\r\n\r\n  return {\r\n    city: name,\r\n    temp,\r\n    icon,\r\n    main,\r\n    pressure,\r\n    humidity,\r\n    wind: speed,\r\n    lon: coord.lon,\r\n    lat: coord.lat\r\n  }\r\n};\r\n\r\nexport default dataDestructuring;","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\n\r\nconst getWeatherByCoord = (lat, lon, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      appid: APIkey,\r\n      lat: lat,\r\n      lon: lon\r\n    }\r\n  });\r\n\r\nconst getWeatherByCityName = (cityName, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      q: cityName,\r\n      appid: APIkey\r\n    }\r\n  });\r\n\r\n\r\nexport {\r\n  getWeatherByCoord,\r\n  getWeatherByCityName\r\n};","const updateLoadingStatus = (loading) => ({\r\n  type: 'UPDATE_LOADING_STATUS',\r\n  loading\r\n});\r\n\r\nconst cityDelete = (index) => ({\r\n  type: 'DELETE_CITY',\r\n  index\r\n});\r\n\r\nconst cityRequest = () => ({\r\n  type: 'FETCH_CITY_REQUEST'\r\n});\r\n\r\nconst cityLoaded = (city) => ({\r\n  type: 'FETCH_CITY_SUCCESS',\r\n  city\r\n});\r\n\r\nconst cityError = (city = '') => ({\r\n  type: 'FETCH_CITY_ERROR',\r\n  city\r\n});\r\n\r\nconst locRequested = () => ({\r\n  type: 'FETCH_GEOLOCATION_REQUEST',\r\n  isGeoPosAvailable: null\r\n});\r\n\r\nconst locLoaded = () => ({\r\n  type: 'FETCH_GEOLOCATION_SUCCESS',\r\n  isGeoPosAvailable: true\r\n});\r\n\r\nconst locError = () => ({\r\n  type: 'FETCH_GEOLOCATION_FAILURE',\r\n  isGeoPosAvailable: false\r\n});\r\n\r\nconst cityByCoordsLoaded = (city) => ({\r\n  type: 'FETCH_CITY_BY_COORDS_SUCCESS',\r\n  city\r\n});\r\n\r\nconst addCityToQueue = (city) => ({\r\n  type: 'ADD_CITY_TO_QUEUE',\r\n  city\r\n});\r\n\r\nconst deleteCityFromQueue = () => ({\r\n  type: 'DELETE_CITY_FROM_QUEUE'\r\n});\r\n\r\nconst addErrorMessage = (message) => ({\r\n  type: 'ADD_ERROR_MESSAGE',\r\n  message\r\n});\r\n\r\nconst clearErrorMessage = () => ({\r\n  type: 'CLEAR_ERROR_MESSAGE'\r\n});\r\n\r\n\r\nexport {\r\n  cityRequest,\r\n  cityLoaded,\r\n  locError,\r\n  locLoaded,\r\n  locRequested,\r\n  cityDelete,\r\n  updateLoadingStatus,\r\n  cityByCoordsLoaded,\r\n  cityError,\r\n  addCityToQueue,\r\n  deleteCityFromQueue,\r\n  addErrorMessage,\r\n  clearErrorMessage\r\n};","import React from 'react';\r\nimport './Input.scss';\r\n\r\nconst Input = ({ handleChange, inputValue, clickButton }) => (\r\n  <div className=\"search\">\r\n    <form className=\"input-form\">\r\n      <input\r\n        className=\"input-field\"\r\n        onChange={handleChange}\r\n        value={ inputValue }\r\n      />\r\n      <button\r\n        className=\"search-button\"\r\n        onClick={clickButton}\r\n      >\r\n        Search\r\n      </button>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addCityToQueue } from \"../../actions\";\r\nimport Input from \"../../components/Input\";\r\n\r\nconst InputContainer = ({ addCityToQueue }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleChange = (event) =>\r\n    setInputValue(event.target.value);\r\n\r\n  const clickButton = (event) =>{\r\n    event.preventDefault();\r\n    setInputValue('');\r\n    if (inputValue !== '')\r\n      addCityToQueue(inputValue);\r\n  };\r\n\r\n  return <Input inputValue={inputValue} handleChange={handleChange} clickButton={clickButton} />;\r\n};\r\n\r\nexport default connect( null, { addCityToQueue } )( InputContainer );","import React from 'react';\r\nimport './IconBar.scss';\r\nimport updIcon from './svg/update.svg';\r\nimport errIcon from './svg/err.svg';\r\n\r\nconst IconBar = ({ locRequested, errorMessage }) => {\r\n  return (\r\n    <div className=\"icon-bar\">\r\n      <div className=\"icons\">\r\n        <img className=\"navIcon\" src={updIcon} alt=\"\"  onClick={() => locRequested()} />\r\n        {errorMessage ? <img className=\"errIcon\" src={errIcon} alt=\"\" /> : null}\r\n        {errorMessage ? <div className=\"error-text\">{errorMessage}</div> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default IconBar;","import { connect } from \"react-redux\";\r\nimport { locRequested } from \"../../actions\";\r\nimport IconBar from \"../../components/IconBar\";\r\n\r\nconst mapStateToProps = ({errorMessage}) => ({errorMessage});\r\n\r\nexport default connect(mapStateToProps, { locRequested })(IconBar);","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () =>\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-eclipse\">\r\n      <div/>\r\n    </div>\r\n  </div>;\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport icon01 from './icons/01.svg';\r\nimport icon02 from './icons/02.svg';\r\nimport icon03 from './icons/03.svg';\r\nimport icon04 from './icons/04.svg';\r\nimport icon09 from './icons/09.svg';\r\nimport icon10 from './icons/10.svg';\r\nimport icon11 from './icons/11.svg';\r\nimport icon13 from './icons/13.svg';\r\nimport icon50 from './icons/50.svg';\r\n\r\nconst WeatherIcon = ({iconNumber}) => {\r\n  const createImg = (icon) => (\r\n    <img src={icon} alt=\"\"/>\r\n  );\r\n  switch (iconNumber) {\r\n    case '01':\r\n      return createImg(icon01);\r\n    case '02':\r\n      return createImg(icon02);\r\n    case '03':\r\n      return createImg(icon03);\r\n    case '04':\r\n      return createImg(icon04);\r\n    case '09':\r\n      return createImg(icon09);\r\n    case '10':\r\n      return createImg(icon10);\r\n    case '11':\r\n      return createImg(icon11);\r\n    case '13':\r\n      return createImg(icon13);\r\n    case '50':\r\n      return createImg(icon50);\r\n    default :\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default WeatherIcon;","import React from 'react'\r\nimport './WeatherInfo.scss'\r\n\r\nconst WeatherInfo = ({ pressure, wind, humidity, lat, lon}) => {\r\n  return (\r\n    <div className=\"info-block\">\r\n      <div className=\"item-info\">Pressure: {pressure} hPA</div>\r\n      <div className=\"item-info\">Wind: {wind} m/s</div>\r\n      <div className=\"item-info\">Humidity: {humidity}%</div>\r\n      <div className=\"item-info\">Coord: [{lat}, {lon}]</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;","import React from 'react';\r\nimport './FavoriteCity.scss';\r\nimport deleteIcon from './svg/delete.svg';\r\nimport Spinner from \"../Spinner\";\r\nimport WeatherIcon from \"../WeatherIcon\";\r\nimport WeatherInfo from \"../WeatherInfo\";\r\n\r\nconst FavoriteCity = ({ city, loading, deleteCity }) => {\r\n  return (\r\n    <div className=\"item\">\r\n      {loading ?\r\n        <Spinner/> :\r\n        <div className=\"item-content\">\r\n          <div className=\"item-header\">\r\n            <div className=\"item-header-city\">{city.city}</div>\r\n            <img className=\"del-icon\" src={deleteIcon} alt=\"\" onClick={deleteCity} />\r\n          </div>\r\n          <div className=\"item-body\">\r\n            <div className=\"item-body-left\">\r\n              <div className=\"item-temperature\">{city.temp}°</div>\r\n              <WeatherIcon iconNumber={city.icon} />\r\n            </div>\r\n            <WeatherInfo {...city} />\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FavoriteCity;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { cityDelete } from \"../../actions\";\r\nimport FavoriteCity from \"../../components/FavoriteCity\";\r\n\r\nconst CityListItem = ({ city, i, cityDelete }) => {\r\n  const [ loading, setLoading ] = useState(true);\r\n  const deleteCity = () => cityDelete(i);\r\n\r\n  useEffect(() => {\r\n    if(city && JSON.stringify(city) !== '{}'){\r\n      setLoading(false);}\r\n    else\r\n      setLoading(true);\r\n  }, [city]);\r\n\r\n  return <FavoriteCity\r\n    city={city}\r\n    loading={loading}\r\n    deleteCity={deleteCity}\r\n  />;\r\n};\r\n\r\nexport default connect(null, { cityDelete })(CityListItem);","import React from 'react';\r\nimport './FavoriteCities.scss';\r\nimport FavoriteCityContainer from \"../../containers/FavoriteCityContainer\";\r\n\r\nconst FavoriteCities = ({ cities }) => {\r\n  return (\r\n    <div className=\"city-list\">\r\n      {cities.map((el, i) => (<FavoriteCityContainer city={el} key={i} i={i}/>))}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FavoriteCities;","import { connect } from 'react-redux';\r\nimport FavoriteCities from \"../../components/FavoriteCities\";\r\n\r\nconst mapStateToProps = ({ cities }) => ({\r\n  cities\r\n});\r\n\r\nexport default connect(mapStateToProps)(FavoriteCities);","import React  from 'react';\r\nimport './CurrentCity.scss';\r\nimport WeatherIcon from \"../WeatherIcon\";\r\nimport WeatherInfo from \"../WeatherInfo\";\r\nimport Spinner from \"../Spinner\";\r\n\r\nconst CurrentCity = ({ city, loading }) => (\r\n  loading ?\r\n    <Spinner /> :\r\n    city.error ?\r\n      <div>{city.error}</div> :\r\n      <div className=\"current-city\">\r\n        <div className=\"current-city__name\">\r\n          <div className=\"current-city__city-name\">{city.city}</div>\r\n          <div className=\"current-city__weather\">{city.main}</div>\r\n        </div>\r\n        <div className=\"current-city__temp\">\r\n          <div className=\"current-city__weather-icon\">\r\n            <WeatherIcon iconNumber={city.icon} />\r\n          </div>\r\n          <div className=\"current-city__temperature\">{city.temp}°</div>\r\n        </div>\r\n        <div className=\"current-city__info\">\r\n          <WeatherInfo {...city} />\r\n        </div>\r\n      </div>\r\n);\r\n\r\nexport default CurrentCity;","import { connect } from 'react-redux';\r\nimport CurrentCity from \"../../components/CurrentCity\";\r\n\r\nconst mapStateToProps = ({ loading, cityByCoords }) => ({\r\n  city: cityByCoords,\r\n  loading\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentCity);","import React from 'react';\r\nimport './Page.scss';\r\nimport InputContainer from \"../../containers/InputContainer\";\r\nimport IconBarContainer from \"../../containers/IconBarContainer\";\r\nimport FavoriteCitiesContainer from \"../../containers/FavoriteCitiesContainer\";\r\nimport CurrentCityContainer from \"../../containers/CurrentCityContainer\";\r\n\r\nconst Page = () => (\r\n  <div className=\"page\">\r\n    <InputContainer/>\r\n    <IconBarContainer/>\r\n    <FavoriteCitiesContainer/>\r\n    <CurrentCityContainer/>\r\n  </div>\r\n);\r\n\r\nexport default Page;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as utils from \"./utils\";\r\nimport * as actions from './actions';\r\nimport Page from './components/Page'\r\n\r\nconst App = (props) => {\r\n  const {deleteCityFromQueue, addErrorMessage, clearErrorMessage, cityError, cityLoaded,\r\n    cityRequest, locLoaded, locError, cityByCoordsLoaded, updateLoadingStatus, state} = props;\r\n  const { apiKey, cityDefault, isGeoPosAvailable, cityByCoords, citiesQueue } = state;\r\n  const { getWeatherByCityName, getWeatherByCoord, dataDestructuring, getGeoPosition, saveToLocalStorage } = utils;\r\n\r\n  const successGeoLocCallback = (pos) => {\r\n    const lat = pos.coords.latitude;\r\n    const lon = pos.coords.longitude;\r\n    locLoaded();\r\n    getWeatherByCoord(lat, lon, apiKey)\r\n      .then((res) => {\r\n        cityByCoordsLoaded(dataDestructuring(res.data));\r\n      })\r\n      .catch((err) => {\r\n        cityByCoordsLoaded({error: err.message});\r\n      });\r\n  };\r\n\r\n  const errorGeoLocCallback = () => {\r\n    locError();\r\n    getWeatherByCityName(cityDefault, apiKey)\r\n      .then((res) => {\r\n        cityByCoordsLoaded(dataDestructuring(res.data));\r\n      })\r\n      .catch((err) => {\r\n        cityByCoordsLoaded({error: err.message});\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(citiesQueue.length > 0){\r\n      cityRequest();\r\n      getWeatherByCityName(citiesQueue[0], apiKey)\r\n        .then((res) => {\r\n          cityLoaded(dataDestructuring(res.data));\r\n          clearErrorMessage();\r\n        })\r\n        .catch((err) => {\r\n          cityError();\r\n          addErrorMessage(err.message);\r\n        });\r\n      deleteCityFromQueue();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(isGeoPosAvailable === null)\r\n      getGeoPosition(successGeoLocCallback, errorGeoLocCallback);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(cityByCoords && JSON.stringify(cityByCoords) !== '{}')\r\n      updateLoadingStatus(false);\r\n  }, [cityByCoords, updateLoadingStatus]);\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(state);\r\n  });\r\n\r\n  return <Page/>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({state});\r\n\r\nconst mapDispatchToProps = {...actions};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const storeTemplate = {\r\n  apiKey: '9c2f796d45e91e5c01a2ae26f1613625',\r\n  citiesQueue: [],\r\n  cities: [],\r\n  loading: true,\r\n  isGeoPosAvailable: null,\r\n  cityDefault: 'Moscow',\r\n  cityByCoords: {},\r\n  errorMessage: null\r\n};\r\n\r\nexport default storeTemplate;","import { getLocalState } from \"../utils\";\r\nimport storeTemplate from \"./storeTemplate\";\r\n\r\nconst localState = getLocalState();\r\n\r\nconst initialState =\r\n  localState\r\n    ? { ...storeTemplate, ...localState }\r\n    : storeTemplate;\r\n\r\nexport default initialState;","import initialState from '../store/initialState'\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'ADD_CITY_TO_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.push(action.city);\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'DELETE_CITY_FROM_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.shift();\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'UPDATE_LOADING_STATUS':\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      };\r\n    case 'DELETE_CITY':{\r\n      const cities = [...state.cities];\r\n      cities.splice(action.index, 1);\r\n      return {\r\n        ...state,\r\n        cities,\r\n        inputField: null\r\n      };\r\n    }\r\n    case 'FETCH_CITY_REQUEST':{\r\n      const cities = [...state.cities];\r\n      cities.push({});\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_ERROR':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities.splice(i, 1);\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_SUCCESS':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities[i] = action.city;\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_GEOLOCATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable,\r\n        loading: true\r\n      };\r\n    case 'FETCH_GEOLOCATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_GEOLOCATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_CITY_BY_COORDS_SUCCESS':{\r\n      return {\r\n        ...state,\r\n        cityByCoords: action.city\r\n      };\r\n    }\r\n    case 'ADD_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: action.message\r\n      };\r\n    case 'CLEAR_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './store/store';\r\n\r\nimport './index.scss'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}