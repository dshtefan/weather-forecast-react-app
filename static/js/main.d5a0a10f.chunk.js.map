{"version":3,"sources":["components/city-default/svg/update.svg","components/city-list-item/svg/delete.svg","components/spinner/index.js","components/spinner/spinner.js","actions/index.js","components/city-default/index.js","components/city-default/city-default.js","components/city-list-item/index.js","components/city-list-item/city-list-item.js","components/input-box/input-box.js","components/input-box/index.js","components/city-list/index.js","components/city-list/city-list.js","components/pages/main-page.js","utils/getWeather.js","utils/weatherDataProcessing.js","components/app/App.js","utils/getGeoPosition.js","reducers/initial-state.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Spinner","className","locRequested","type","isGeoPosAvailable","CityDefault","connect","loading","city","cityByCoords","id","src","updIcon","alt","onClick","main","icon","temp","pressure","wind","humidity","lat","lon","CityListItem","cityDelete","index","i","useState","setLoading","useEffect","JSON","stringify","error","deleteIcon","mapDispatchToProps","updateInputField","text","InputBox","inputValue","setInputValue","onChange","event","target","value","preventDefault","CityList","frontCity","cities","map","el","key","MainPage","apiUrl","getWeatherByCityName","cityName","APIkey","axios","get","params","q","appid","dataDestructuring","weather","name","speed","coord","toFixed","substr","cityLoaded","cityRequest","locError","locLoaded","cityByCoordsLoaded","updateLoadingStatus","state","props","apiKey","cityDefault","inputField","successGeoLocCallback","pos","coords","latitude","longitude","getWeatherByCoord","then","res","data","errorGeoLocCallback","catch","err","message","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","localStorage","setItem","localState","parse","getItem","initialState","reducer","action","splice","push","filter","item","length","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5a0a10f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/update.084487e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.619e5992.svg\";","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () =>\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-eclipse\">\r\n      <div/>\r\n    </div>\r\n  </div>;\r\n\r\nexport default Spinner;","const updateInputField = (text) => ({\r\n  type: 'UPDATE_INPUT_FIELD',\r\n  text\r\n});\r\n\r\nconst updateLoadingStatus = (loading) => ({\r\n  type: 'UPDATE_LOADING_STATUS',\r\n  loading\r\n});\r\n\r\nconst cityDelete = (index) => ({\r\n  type: 'DELETE_CITY',\r\n  index\r\n});\r\n\r\nconst cityRequest = () => ({\r\n  type: 'FETCH_CITY_REQUEST'\r\n});\r\n\r\nconst cityLoaded = (city) => ({\r\n  type: 'FETCH_CITY_SUCCESS',\r\n  city\r\n});\r\n\r\nconst locRequested = () => ({\r\n  type: 'FETCH_GEOLOCATION_REQUEST',\r\n  isGeoPosAvailable: null\r\n});\r\n\r\nconst locLoaded = () => ({\r\n  type: 'FETCH_GEOLOCATION_SUCCESS',\r\n  isGeoPosAvailable: true\r\n});\r\n\r\nconst locError = () => ({\r\n  type: 'FETCH_GEOLOCATION_FAILURE',\r\n  isGeoPosAvailable: false\r\n});\r\n\r\nconst cityByCoordsLoaded = (city) => ({\r\n  type: 'FETCH_CITY_BY_COORDS_SUCCESS',\r\n  city\r\n});\r\n\r\nexport {\r\n  cityRequest,\r\n  cityLoaded,\r\n  locError,\r\n  locLoaded,\r\n  locRequested,\r\n  updateInputField,\r\n  cityDelete,\r\n  updateLoadingStatus,\r\n  cityByCoordsLoaded\r\n};","import CityDefault from './city-default';\r\n\r\nexport default CityDefault;","import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './city-default.scss';\r\nimport updIcon from './svg/update.svg';\r\nimport Spinner from '../spinner';\r\nimport { locRequested } from \"../../actions\";\r\n\r\nconst CityDefault = ({ city, loading, locRequested }) => {\r\n  const updCityInfo = () => locRequested();\r\n\r\n  return (\r\n    <div id=\"city-default\">\r\n      {loading\r\n        ? <Spinner />\r\n        : <div>\r\n          <div id=\"icons-bar\">\r\n            <img id=\"navIcon\" src={updIcon} alt=\"\" onClick={updCityInfo}/>\r\n          </div>\r\n          <div id=\"city-info\">\r\n            <div id=\"city-info-name\">{city.city}</div>\r\n            <div id=\"city-info-weather\">{city.main}</div>\r\n          </div>\r\n          <div id=\"cd-weather-icon\">\r\n            <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/>\r\n          </div>\r\n          <div id=\"cd-temp\">{`${city.temp}°`}</div>\r\n          <div id=\"сd-weather-values\">\r\n            <div>Pressure: <span id=\"cd-pressure\">{city.pressure} pHa</span></div>\r\n            <div>Wind: <span id=\"cd-wind\">{city.wind} m/s</span></div>\r\n            <div>Humidity: <span id=\"cd-himidity\">{city.humidity}%</span></div>\r\n            <div>Coord: <span id=\"cd-coord\">{`[${city.lat}: ${city.lon}]`}</span></div>\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ loading, cityByCoords }) => ({\r\n  city: cityByCoords,\r\n  loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { locRequested })(CityDefault);","import CityListItem from './city-list-item';\r\n\r\nexport default CityListItem;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './city-list-item.scss';\r\nimport deleteIcon from './svg/delete.svg';\r\nimport { cityDelete } from \"../../actions\";\r\nimport Spinner from '../spinner';\r\n\r\nconst CityListItem = ({ city, i, cityDelete }) => {\r\n  const [ loading, setLoading ] = useState(true);\r\n  const deleteCity = () => cityDelete(i);\r\n\r\n  useEffect(() => {\r\n    if(city && JSON.stringify(city) !== '{}'){\r\n      setLoading(false);}\r\n    else\r\n      setLoading(true);\r\n  }, [city]);\r\n\r\n  return (\r\n    <div className=\"city-list-item\">\r\n      {loading\r\n        ? <Spinner/>\r\n        : <div className=\"city-list-item\">\r\n          <div id=\"tab-info\">\r\n            <div id=\"tab-info-city\">\r\n              <div id=\"tab-info-city-text\">\r\n                {!city.error ? `${city.city} ${city.temp}°`: ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-icon\">\r\n              <div id=\"tab-info-icon-svg\">\r\n                {!city.error ? <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/> : ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-delete\">\r\n              <div id=\"tab-info-delete-svg\">\r\n                <img src={deleteIcon} alt=\"\" onClick={deleteCity}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {city.error\r\n            ? <div className=\"error-message\">{city.error}</div>\r\n            :<div id=\"item-info\">\r\n              <div id=\"item-info-left\">\r\n                <div className=\"weather-info-line\">Pressure:</div>\r\n                <div className=\"weather-info-line\">Wind:</div>\r\n                <div className=\"weather-info-line\">Humidity:</div>\r\n                <div className=\"weather-info-line\">Coord.:</div>\r\n              </div>\r\n              <div id=\"item-info-right\">\r\n                <div className=\"weather-info-line\">{city.pressure} hPa</div>\r\n                <div className=\"weather-info-line\">{city.wind} m/s</div>\r\n                <div className=\"weather-info-line\">{city.humidity}%</div>\r\n                <div className=\"weather-info-line\">[{city.lat}, {city.lon}]</div>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect(null, { cityDelete })(CityListItem);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './input-box.scss';\r\nimport { updateInputField } from \"../../actions\";\r\n\r\nconst InputBox = ({ updateInputField }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleChange = (event) =>\r\n    setInputValue(event.target.value);\r\n\r\n  const clickButton = (event) =>{\r\n    event.preventDefault();\r\n    setInputValue('');\r\n    updateInputField(inputValue);\r\n  };\r\n\r\n  return (\r\n    <div id=\"input-box-main\">\r\n      <div id=\"input-box\">\r\n        <form id=\"input-form\">\r\n          <input\r\n            id=\"input-field\"\r\n            onChange={handleChange}\r\n            value={ inputValue }\r\n          />\r\n          <button\r\n            id=\"search-button\"\r\n            onClick={clickButton}\r\n          >\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateInputField\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(InputBox);","import InputBox from \"./input-box\";\r\n\r\nexport default InputBox;","import CityList from './city-list';\r\n\r\nexport default CityList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './city-list.scss';\r\nimport CityListItem from '../city-list-item';\r\nimport InputBox from '../input-box';\r\n\r\nconst CityList = ({ cities }) => {\r\n  return (\r\n    <div id=\"city-list\">\r\n      <InputBox />\r\n      <div className={\"city-list\"}>\r\n        {cities.map((el, i) => (<CityListItem city={el} key={i} i={i}/>))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ frontCity, cities }) => ({\r\n  cities,\r\n  frontCity\r\n});\r\n\r\nexport default connect(mapStateToProps)(CityList);","import React from 'react';\r\nimport CityDefault from '../city-default';\r\nimport CityList from '../city-list';\r\nimport './main-page.scss';\r\n\r\nconst MainPage = () =>\r\n  <div id={'main-page'}>\r\n    <CityDefault />\r\n    <CityList />\r\n  </div>;\r\n\r\nexport default MainPage;","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\n\r\nconst getWeatherByCoord = (lat, lon, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      appid: APIkey,\r\n      lat: lat,\r\n      lon: lon\r\n    }\r\n  });\r\n\r\nconst getWeatherByCityName = (cityName, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      q: cityName,\r\n      appid: APIkey\r\n    }\r\n  });\r\n\r\n\r\nexport {\r\n  getWeatherByCoord,\r\n  getWeatherByCityName\r\n};","export const dataDestructuring = weather => {\r\n  let {\r\n    name,\r\n    main: { temp, humidity, pressure },\r\n    weather: { 0: { main, icon } },\r\n    wind: { speed },\r\n    coord\r\n  } = weather;\r\n\r\n  temp = (temp - 273.15).toFixed(0);\r\n  icon = icon.substr(0, 2);\r\n\r\n  return {\r\n    city: name,\r\n    temp,\r\n    icon,\r\n    main,\r\n    pressure,\r\n    humidity,\r\n    wind: speed,\r\n    lon: coord.lon,\r\n    lat: coord.lat\r\n  }\r\n};","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './app.scss';\nimport { MainPage } from '../pages';\nimport { getWeatherByCityName, getWeatherByCoord } from \"../../utils/getWeather\";\nimport { dataDestructuring } from \"../../utils/weatherDataProcessing\";\nimport { getGeoPosition } from \"../../utils/getGeoPosition\";\nimport {\n  cityByCoordsLoaded,\n  cityLoaded,\n  cityRequest,\n  locError,\n  locLoaded,\n  locRequested,\n  updateLoadingStatus\n} from '../../actions';\n\nconst App = (props) => {\n  const { cityLoaded, cityRequest, locLoaded, locError, cityByCoordsLoaded, updateLoadingStatus, state} = props;\n  const { apiKey, cityDefault, isGeoPosAvailable, inputField, cityByCoords } = state;\n\n  const successGeoLocCallback = (pos) => {\n    const lat = pos.coords.latitude;\n    const lon = pos.coords.longitude;\n    locLoaded();\n    getWeatherByCoord(lat, lon, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      });\n  };\n\n  const errorGeoLocCallback = () => {\n    locError();\n    getWeatherByCityName(cityDefault, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      });\n  };\n\n  useEffect(() => {\n    if(inputField){\n      cityRequest();\n      getWeatherByCityName(inputField, apiKey)\n        .then((res) => {\n          cityLoaded(dataDestructuring(res.data));\n        })\n        .catch((err) => {\n          cityLoaded({error: err.message});\n        });\n    }\n  }, [inputField, apiKey, cityLoaded, cityRequest]);\n\n  useEffect(() => {\n    if(isGeoPosAvailable === null)\n      getGeoPosition(successGeoLocCallback, errorGeoLocCallback);\n  });\n\n  useEffect(() => {\n    if(cityByCoords && JSON.stringify(cityByCoords) !== '{}'){\n      updateLoadingStatus(false);}\n  }, [cityByCoords, updateLoadingStatus]);\n\n\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify({...state, inputField: null}));\n  }, [state]);\n\n  return (\n    <div id={'app'}>\n      <MainPage />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({state});\n\nconst mapDispatchToProps = {\n  cityLoaded,\n  cityRequest,\n  locError,\n  locLoaded,\n  locRequested,\n  cityByCoordsLoaded,\n  updateLoadingStatus\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const getGeoPosition = (successCallback, errorCallback) => {\r\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n};\r\n\r\nexport { getGeoPosition };","const localState = () => JSON.parse(localStorage.getItem('state'));\r\n\r\nconst initialState =\r\n  localState()\r\n    ? localState()\r\n    : {\r\n      apiKey: '3dd82107b17241c740a2a087d34da02d',\r\n      inputField: null,\r\n      cities: [],\r\n      loading: true,\r\n      isGeoPosAvailable: null,\r\n      cityDefault: 'Moscow',\r\n      cityByCoords: {}\r\n    };\r\n\r\nexport default initialState;","import initialState from \"./initial-state\";\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'UPDATE_INPUT_FIELD':\r\n      return {\r\n        ...state,\r\n        inputField: action.text\r\n      };\r\n    case 'UPDATE_LOADING_STATUS':\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      };\r\n    case 'DELETE_CITY':{\r\n      const cities = [...state.cities];\r\n      cities.splice(action.index, 1);\r\n      return {\r\n        ...state,\r\n        cities,\r\n        inputField: null\r\n      };\r\n    }\r\n    case 'FETCH_CITY_REQUEST':{\r\n      const cities = [...state.cities];\r\n      cities.push({});\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_SUCCESS':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities[i] = action.city;\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_GEOLOCATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable,\r\n        loading: true\r\n      };\r\n    case 'FETCH_GEOLOCATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_GEOLOCATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_CITY_BY_COORDS_SUCCESS':{\r\n      return {\r\n        ...state,\r\n        cityByCoords: action.city\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}