{"version":3,"sources":["components/CityDefault/svg/update.svg","components/CityDefault/svg/err.svg","components/CityListItem/svg/delete.svg","components/Spinner/index.js","components/Spinner/Spinner.js","actions/index.js","components/WeatherInfo/index.js","components/WeatherInfo/WeatherInfo.js","components/CityDefault/index.js","components/CityDefault/CityDefault.js","components/CityListItem/index.js","components/CityListItem/CityListItem.js","components/InputBox/index.js","components/InputBox/InputBox.js","components/CityList/index.js","components/CityList/CityList.js","components/Pages/MainPage.js","utils/getWeather.js","utils/weatherDataProcessing.js","utils/getGeoPosition.js","utils/saveToLocalStorage.js","components/App/App.js","store/storeTemplate.js","store/initialState.js","utils/getLocalState.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","Spinner","className","locRequested","type","isGeoPosAvailable","WeatherInfo","pressure","wind","humidity","lat","lon","id","CityDefault","connect","loading","city","cityByCoords","errorMessage","src","updIcon","alt","onClick","errIcon","error","main","icon","temp","CityListItem","cityDelete","index","i","useState","setLoading","useEffect","JSON","stringify","deleteIcon","InputBox","addCityToQueue","inputValue","setInputValue","onChange","event","target","value","preventDefault","CityList","frontCity","cities","map","el","key","MainPage","apiUrl","getWeatherByCityName","cityName","APIkey","axios","get","params","q","appid","dataDestructuring","weather","name","speed","coord","toFixed","substr","getGeoPosition","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","saveToLocalStorage","citiesList","localStorage","setItem","mapDispatchToProps","cityLoaded","cityRequest","locError","locLoaded","cityByCoordsLoaded","updateLoadingStatus","cityError","deleteCityFromQueue","addErrorMessage","message","clearErrorMessage","state","props","apiKey","cityDefault","citiesQueue","successGeoLocCallback","pos","coords","latitude","longitude","getWeatherByCoord","then","res","data","catch","err","errorGeoLocCallback","length","storeTemplate","localState","parse","getItem","getLocalState","initialState","reducer","action","push","shift","splice","inputField","filter","item","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2912e3eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/update.084487e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/err.99f8e8a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.619e5992.svg\";","import Spinner from './Spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () =>\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-eclipse\">\r\n      <div/>\r\n    </div>\r\n  </div>;\r\n\r\nexport default Spinner;","const updateLoadingStatus = (loading) => ({\r\n  type: 'UPDATE_LOADING_STATUS',\r\n  loading\r\n});\r\n\r\nconst cityDelete = (index) => ({\r\n  type: 'DELETE_CITY',\r\n  index\r\n});\r\n\r\nconst cityRequest = () => ({\r\n  type: 'FETCH_CITY_REQUEST'\r\n});\r\n\r\nconst cityLoaded = (city) => ({\r\n  type: 'FETCH_CITY_SUCCESS',\r\n  city\r\n});\r\n\r\nconst cityError = (city = '') => ({\r\n  type: 'FETCH_CITY_ERROR',\r\n  city\r\n});\r\n\r\nconst locRequested = () => ({\r\n  type: 'FETCH_GEOLOCATION_REQUEST',\r\n  isGeoPosAvailable: null\r\n});\r\n\r\nconst locLoaded = () => ({\r\n  type: 'FETCH_GEOLOCATION_SUCCESS',\r\n  isGeoPosAvailable: true\r\n});\r\n\r\nconst locError = () => ({\r\n  type: 'FETCH_GEOLOCATION_FAILURE',\r\n  isGeoPosAvailable: false\r\n});\r\n\r\nconst cityByCoordsLoaded = (city) => ({\r\n  type: 'FETCH_CITY_BY_COORDS_SUCCESS',\r\n  city\r\n});\r\n\r\nconst addCityToQueue = (city) => ({\r\n  type: 'ADD_CITY_TO_QUEUE',\r\n  city\r\n});\r\n\r\nconst deleteCityFromQueue = () => ({\r\n  type: 'DELETE_CITY_FROM_QUEUE'\r\n});\r\n\r\nconst addErrorMessage = (message) => ({\r\n  type: 'ADD_ERROR_MESSAGE',\r\n  message\r\n});\r\n\r\nconst clearErrorMessage = () => ({\r\n  type: 'CLEAR_ERROR_MESSAGE'\r\n});\r\n\r\n\r\nexport {\r\n  cityRequest,\r\n  cityLoaded,\r\n  locError,\r\n  locLoaded,\r\n  locRequested,\r\n  cityDelete,\r\n  updateLoadingStatus,\r\n  cityByCoordsLoaded,\r\n  cityError,\r\n  addCityToQueue,\r\n  deleteCityFromQueue,\r\n  addErrorMessage,\r\n  clearErrorMessage\r\n};","import WeatherInfo from \"./WeatherInfo\";\r\n\r\nexport default WeatherInfo;","import React from 'react'\r\nimport './WeatherInfo.scss'\r\n\r\nconst WeatherInfo = ({ pressure, wind, humidity, lat, lon}) => {\r\n  return (\r\n    <div id=\"item-info\">\r\n      <div id=\"item-info-left\">\r\n        <div className=\"weather-info-line\">Pressure:</div>\r\n        <div className=\"weather-info-line\">Wind:</div>\r\n        <div className=\"weather-info-line\">Humidity:</div>\r\n        <div className=\"weather-info-line\">Coord.:</div>\r\n      </div>\r\n      <div id=\"item-info-right\">\r\n        <div className=\"weather-info-line\">{pressure} hPa</div>\r\n        <div className=\"weather-info-line\">{wind} m/s</div>\r\n        <div className=\"weather-info-line\">{humidity}%</div>\r\n        <div className=\"weather-info-line\">[{lat}, {lon}]</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;","import CityDefault from './CityDefault';\r\n\r\nexport default CityDefault;","import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityDefault.scss';\r\nimport updIcon from './svg/update.svg';\r\nimport errIcon from './svg/err.svg'\r\nimport Spinner from '../Spinner';\r\nimport { locRequested } from \"../../actions\";\r\nimport WeatherInfo from \"../WeatherInfo\";\r\n\r\nconst CityDefault = ({ city, loading, locRequested, errorMessage }) => {\r\n  const updCityInfo = () => locRequested();\r\n\r\n  return (\r\n    <div id=\"city-default\">\r\n      {loading\r\n        ? <Spinner />\r\n        : <div>\r\n          <div id=\"icons-bar\">\r\n            <img id=\"navIcon\" src={updIcon} alt=\"\" onClick={updCityInfo}/>\r\n            {errorMessage !== null ? <img id=\"errIcon\" src={errIcon} alt=\"\"/> : null}\r\n            {errorMessage !== null ? <div className=\"error\">{errorMessage}</div> : null}\r\n          </div>\r\n          {city.error\r\n            ? <div>{city.error}</div>\r\n            : <div>\r\n              <div id=\"city-info\">\r\n                <div id=\"city-info-name\">{city.city}</div>\r\n                <div id=\"city-info-weather\">{city.main}</div>\r\n              </div>\r\n              <div id=\"cd-weather-icon\">\r\n                <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/>\r\n              </div>\r\n              <div id=\"cd-temp\">{`${city.temp}°`}</div>\r\n              <div id=\"сd-weather-values\">\r\n                <WeatherInfo\r\n                  pressure={city.pressure}\r\n                  humidity={city.humidity}\r\n                  wind={city.wind}\r\n                  lat={city.lat}\r\n                  lon={city.lon}\r\n                  />\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ loading, cityByCoords, errorMessage }) => ({\r\n  city: cityByCoords,\r\n  loading,\r\n  errorMessage\r\n});\r\n\r\nexport default connect(mapStateToProps, { locRequested })(CityDefault);","import CityListItem from './CityListItem';\r\n\r\nexport default CityListItem;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityListItem.scss';\r\nimport deleteIcon from './svg/delete.svg';\r\nimport { cityDelete } from \"../../actions\";\r\nimport Spinner from '../Spinner';\r\nimport WeatherInfo from \"../WeatherInfo\";\r\n\r\nconst CityListItem = ({ city, i, cityDelete }) => {\r\n  const [ loading, setLoading ] = useState(true);\r\n  const deleteCity = () => cityDelete(i);\r\n\r\n  useEffect(() => {\r\n    if(city && JSON.stringify(city) !== '{}'){\r\n      setLoading(false);}\r\n    else\r\n      setLoading(true);\r\n  }, [city]);\r\n\r\n  return (\r\n    <div className=\"city-list-item\">\r\n      {loading\r\n        ? <Spinner/>\r\n        : <div className=\"city-list-item\">\r\n          <div id=\"tab-info\">\r\n            <div id=\"tab-info-city\">\r\n              <div id=\"tab-info-city-text\">\r\n                {!city.error ? `${city.city} ${city.temp}°`: ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-icon\">\r\n              <div id=\"tab-info-icon-svg\">\r\n                {!city.error ? <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/> : ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-delete\">\r\n              <div id=\"tab-info-delete-svg\">\r\n                <img src={deleteIcon} alt=\"\" onClick={deleteCity}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {city.error\r\n            ? <div className=\"error-message\">{city.error}</div>\r\n            : <WeatherInfo\r\n                pressure={city.pressure}\r\n                humidity={city.humidity}\r\n                wind={city.wind}\r\n                lat={city.lat}\r\n                lon={city.lon}\r\n            />\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect(null, { cityDelete })(CityListItem);","import InputBox from \"./InputBox\";\r\n\r\nexport default InputBox;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './InputBox.scss';\r\nimport { addCityToQueue } from \"../../actions\";\r\n\r\nconst InputBox = ({ addCityToQueue }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleChange = (event) =>\r\n    setInputValue(event.target.value);\r\n\r\n  const clickButton = (event) =>{\r\n    event.preventDefault();\r\n    setInputValue('');\r\n    addCityToQueue(inputValue);\r\n  };\r\n\r\n  return (\r\n    <div id=\"input-box-main\">\r\n      <div id=\"input-box\">\r\n        <form id=\"input-form\">\r\n          <input\r\n            id=\"input-field\"\r\n            onChange={handleChange}\r\n            value={ inputValue }\r\n          />\r\n          <button\r\n            id=\"search-button\"\r\n            onClick={clickButton}\r\n          >\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect( null, { addCityToQueue } )( InputBox );","import CityList from './CityList';\r\n\r\nexport default CityList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityList.scss';\r\nimport CityListItem from '../CityListItem';\r\nimport InputBox from '../InputBox';\r\n\r\nconst CityList = ({ cities }) => {\r\n  return (\r\n    <div id=\"city-list\">\r\n      <InputBox />\r\n      <div className={\"city-list\"}>\r\n        {cities.map((el, i) => (<CityListItem city={el} key={i} i={i}/>))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ frontCity, cities }) => ({\r\n  cities,\r\n  frontCity\r\n});\r\n\r\nexport default connect(mapStateToProps)(CityList);","import React from 'react';\r\nimport CityDefault from '../CityDefault';\r\nimport CityList from '../CityList';\r\nimport './MainPage.scss';\r\n\r\nconst MainPage = () =>\r\n  <div id={'main-page'}>\r\n    <CityDefault />\r\n    <CityList />\r\n  </div>;\r\n\r\nexport default MainPage;","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\n\r\nconst getWeatherByCoord = (lat, lon, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      appid: APIkey,\r\n      lat: lat,\r\n      lon: lon\r\n    }\r\n  });\r\n\r\nconst getWeatherByCityName = (cityName, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      q: cityName,\r\n      appid: APIkey\r\n    }\r\n  });\r\n\r\n\r\nexport {\r\n  getWeatherByCoord,\r\n  getWeatherByCityName\r\n};","const dataDestructuring = weather => {\r\n  let {\r\n    name,\r\n    main: { temp, humidity, pressure },\r\n    weather: { 0: { main, icon } },\r\n    wind: { speed },\r\n    coord\r\n  } = weather;\r\n\r\n  temp = (temp - 273.15).toFixed(0);\r\n  icon = icon.substr(0, 2);\r\n\r\n  return {\r\n    city: name,\r\n    temp,\r\n    icon,\r\n    main,\r\n    pressure,\r\n    humidity,\r\n    wind: speed,\r\n    lon: coord.lon,\r\n    lat: coord.lat\r\n  }\r\n};\r\n\r\nexport default dataDestructuring;","const getGeoPosition = (successCallback, errorCallback) => {\r\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n};\r\n\r\nexport default getGeoPosition;","const saveToLocalStorage = ( { cities } ) => {\r\n  const citiesList = cities.map(( city ) => ({ city: city.city }));\r\n  localStorage.setItem('state', JSON.stringify({cities: citiesList}));\r\n};\r\n\r\nexport default saveToLocalStorage;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { MainPage } from '../Pages';\nimport { getWeatherByCityName, getWeatherByCoord } from \"../../utils/getWeather\";\nimport dataDestructuring from \"../../utils/weatherDataProcessing\";\nimport getGeoPosition from \"../../utils/getGeoPosition\";\nimport saveToLocalStorage from \"../../utils/saveToLocalStorage\";\nimport {\n  addErrorMessage,\n  cityByCoordsLoaded,\n  cityError,\n  cityLoaded,\n  cityRequest, clearErrorMessage, deleteCityFromQueue,\n  locError,\n  locLoaded,\n  locRequested,\n  updateLoadingStatus\n} from '../../actions';\n\nconst App = (props) => {\n  const {\n    deleteCityFromQueue,\n    addErrorMessage,\n    clearErrorMessage,\n    cityError,\n    cityLoaded,\n    cityRequest,\n    locLoaded,\n    locError,\n    cityByCoordsLoaded,\n    updateLoadingStatus,\n    state\n  } = props;\n  const {\n    apiKey,\n    cityDefault,\n    isGeoPosAvailable,\n    cityByCoords,\n    cities,\n    citiesQueue\n  } = state;\n\n  const successGeoLocCallback = (pos) => {\n    const lat = pos.coords.latitude;\n    const lon = pos.coords.longitude;\n    locLoaded();\n    getWeatherByCoord(lat, lon, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      })\n      .catch((err) => {\n        cityByCoordsLoaded({error: err.message});\n      });\n  };\n\n  const errorGeoLocCallback = () => {\n    locError();\n    getWeatherByCityName(cityDefault, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      })\n      .catch((err) => {\n        cityByCoordsLoaded({error: err.message});\n      });\n  };\n\n  useEffect(() => {\n    if(citiesQueue.length > 0){\n      if(cities.length < 4) {\n        cityRequest();\n        getWeatherByCityName(citiesQueue[0], apiKey)\n          .then((res) => {\n            cityLoaded(dataDestructuring(res.data));\n            clearErrorMessage();\n          })\n          .catch((err) => {\n            cityError();\n            addErrorMessage(err.message);\n          });\n        deleteCityFromQueue();\n      } else {\n        deleteCityFromQueue();\n      }\n    }\n  }, [\n    citiesQueue,\n    addErrorMessage,\n    clearErrorMessage,\n    cities,\n    deleteCityFromQueue,\n    apiKey,\n    cityLoaded,\n    cityRequest,\n    cityError\n  ]);\n\n  useEffect(() => {\n    if(isGeoPosAvailable === null)\n      getGeoPosition(successGeoLocCallback, errorGeoLocCallback);\n  });\n\n  useEffect(() => {\n    if(cityByCoords && JSON.stringify(cityByCoords) !== '{}')\n      updateLoadingStatus(false);\n  }, [cityByCoords, updateLoadingStatus]);\n\n\n  useEffect(() => {\n    saveToLocalStorage(state);\n  }, [state]);\n\n  return (\n    <div id={'app'}>\n      <MainPage />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({state});\n\nconst mapDispatchToProps = {\n  cityLoaded,\n  cityRequest,\n  locError,\n  locLoaded,\n  locRequested,\n  cityByCoordsLoaded,\n  updateLoadingStatus,\n  cityError,\n  deleteCityFromQueue,\n  addErrorMessage,\n  clearErrorMessage\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const storeTemplate = {\r\n  apiKey: '9c2f796d45e91e5c01a2ae26f1613625',\r\n  citiesQueue: [],\r\n  cities: [],\r\n  loading: true,\r\n  isGeoPosAvailable: null,\r\n  cityDefault: 'Moscow',\r\n  cityByCoords: {},\r\n  errorMessage: null\r\n};\r\n\r\nexport default storeTemplate;","import getLocalState from \"../utils/getLocalState\";\r\nimport storeTemplate from \"./storeTemplate\";\r\n\r\nconst localState = getLocalState();\r\n\r\nconst initialState =\r\n  localState\r\n    ? { ...storeTemplate, ...localState }\r\n    : storeTemplate;\r\n\r\nexport default initialState;","const getLocalState = () => {\r\n  const state = JSON.parse( localStorage.getItem('state') );\r\n  if (state === null)\r\n    return null;\r\n  const citiesQueue = state.cities.map( (city) => city.city );\r\n  return { citiesQueue };\r\n};\r\n\r\nexport default getLocalState;","import initialState from '../store/initialState'\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'ADD_CITY_TO_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.push(action.city);\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'DELETE_CITY_FROM_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.shift();\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'UPDATE_LOADING_STATUS':\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      };\r\n    case 'DELETE_CITY':{\r\n      const cities = [...state.cities];\r\n      cities.splice(action.index, 1);\r\n      return {\r\n        ...state,\r\n        cities,\r\n        inputField: null\r\n      };\r\n    }\r\n    case 'FETCH_CITY_REQUEST':{\r\n      const cities = [...state.cities];\r\n      cities.push({});\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_ERROR':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities.splice(i, 1);\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_SUCCESS':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities[i] = action.city;\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_GEOLOCATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable,\r\n        loading: true\r\n      };\r\n    case 'FETCH_GEOLOCATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_GEOLOCATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_CITY_BY_COORDS_SUCCESS':{\r\n      return {\r\n        ...state,\r\n        cityByCoords: action.city\r\n      };\r\n    }\r\n    case 'ADD_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: action.message\r\n      };\r\n    case 'CLEAR_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorMessage: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App/App';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}