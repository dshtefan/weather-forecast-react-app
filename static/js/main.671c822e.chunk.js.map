{"version":3,"sources":["components/CityDefault/svg/update.svg","components/CityListItem/svg/delete.svg","components/Spinner/index.js","components/Spinner/Spinner.js","actions/index.js","components/CityDefault/index.js","components/CityDefault/CityDefault.js","components/CityListItem/index.js","components/CityListItem/CityListItem.js","components/InputBox/index.js","components/InputBox/InputBox.js","components/CityList/index.js","components/CityList/CityList.js","components/Pages/MainPage.js","utils/getWeather.js","utils/weatherDataProcessing.js","utils/getGeoPosition.js","utils/saveToLocalStorage.js","utils/saveCityToStore.js","components/App/App.js","store/storeTemplate.js","store/initialState.js","utils/getLocalState.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","Spinner","className","locRequested","type","isGeoPosAvailable","CityDefault","connect","loading","city","cityByCoords","id","src","updIcon","alt","onClick","error","main","icon","temp","pressure","wind","humidity","lat","lon","CityListItem","cityDelete","index","i","useState","setLoading","useEffect","JSON","stringify","deleteIcon","InputBox","addCityToQueue","inputValue","setInputValue","onChange","event","target","value","preventDefault","CityList","frontCity","cities","map","el","key","MainPage","apiUrl","getWeatherByCityName","cityName","APIkey","axios","get","params","q","appid","dataDestructuring","weather","name","speed","coord","toFixed","substr","getGeoPosition","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","saveToLocalStorage","citiesList","localStorage","setItem","saveCityToStore","apiKey","cityLoaded","cityError","cityRequest","then","res","data","catch","mapDispatchToProps","locError","locLoaded","cityByCoordsLoaded","updateLoadingStatus","deleteCityFromQueue","state","props","cityDefault","citiesQueue","successGeoLocCallback","pos","coords","latitude","longitude","getWeatherByCoord","err","message","errorGeoLocCallback","length","storeTemplate","localState","parse","getItem","getLocalState","initialState","reducer","action","push","shift","splice","inputField","filter","item","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.671c822e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/update.084487e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.619e5992.svg\";","import Spinner from './Spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () =>\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-eclipse\">\r\n      <div/>\r\n    </div>\r\n  </div>;\r\n\r\nexport default Spinner;","const updateLoadingStatus = (loading) => ({\r\n  type: 'UPDATE_LOADING_STATUS',\r\n  loading\r\n});\r\n\r\nconst cityDelete = (index) => ({\r\n  type: 'DELETE_CITY',\r\n  index\r\n});\r\n\r\nconst cityRequest = () => ({\r\n  type: 'FETCH_CITY_REQUEST'\r\n});\r\n\r\nconst cityLoaded = (city) => ({\r\n  type: 'FETCH_CITY_SUCCESS',\r\n  city\r\n});\r\n\r\nconst cityError = (city = '') => ({\r\n  type: 'FETCH_CITY_ERROR',\r\n  city\r\n});\r\n\r\nconst locRequested = () => ({\r\n  type: 'FETCH_GEOLOCATION_REQUEST',\r\n  isGeoPosAvailable: null\r\n});\r\n\r\nconst locLoaded = () => ({\r\n  type: 'FETCH_GEOLOCATION_SUCCESS',\r\n  isGeoPosAvailable: true\r\n});\r\n\r\nconst locError = () => ({\r\n  type: 'FETCH_GEOLOCATION_FAILURE',\r\n  isGeoPosAvailable: false\r\n});\r\n\r\nconst cityByCoordsLoaded = (city) => ({\r\n  type: 'FETCH_CITY_BY_COORDS_SUCCESS',\r\n  city\r\n});\r\n\r\nconst addCityToQueue = (city) => ({\r\n  type: 'ADD_CITY_TO_QUEUE',\r\n  city\r\n});\r\n\r\nconst deleteCityFromQueue = () => ({\r\n  type: 'DELETE_CITY_FROM_QUEUE'\r\n});\r\n\r\nexport {\r\n  cityRequest,\r\n  cityLoaded,\r\n  locError,\r\n  locLoaded,\r\n  locRequested,\r\n  cityDelete,\r\n  updateLoadingStatus,\r\n  cityByCoordsLoaded,\r\n  cityError,\r\n  addCityToQueue,\r\n  deleteCityFromQueue\r\n};","import CityDefault from './CityDefault';\r\n\r\nexport default CityDefault;","import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityDefault.scss';\r\nimport updIcon from './svg/update.svg';\r\nimport Spinner from '../Spinner';\r\nimport { locRequested } from \"../../actions\";\r\n\r\nconst CityDefault = ({ city, loading, locRequested }) => {\r\n  const updCityInfo = () => locRequested();\r\n\r\n  return (\r\n    <div id=\"city-default\">\r\n      {loading\r\n        ? <Spinner />\r\n        : <div>\r\n          <div id=\"icons-bar\">\r\n            <img id=\"navIcon\" src={updIcon} alt=\"\" onClick={updCityInfo}/>\r\n          </div>\r\n          {city.error\r\n            ? <div>{city.error}</div>\r\n            : <div>\r\n              <div id=\"city-info\">\r\n                <div id=\"city-info-name\">{city.city}</div>\r\n                <div id=\"city-info-weather\">{city.main}</div>\r\n              </div>\r\n              <div id=\"cd-weather-icon\">\r\n                <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/>\r\n              </div>\r\n              <div id=\"cd-temp\">{`${city.temp}°`}</div>\r\n              <div id=\"сd-weather-values\">\r\n                <div>Pressure: <span id=\"cd-pressure\">{city.pressure} pHa</span></div>\r\n                <div>Wind: <span id=\"cd-wind\">{city.wind} m/s</span></div>\r\n                <div>Humidity: <span id=\"cd-himidity\">{city.humidity}%</span></div>\r\n                <div>Coord: <span id=\"cd-coord\">{`[${city.lat}: ${city.lon}]`}</span></div>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ loading, cityByCoords }) => ({\r\n  city: cityByCoords,\r\n  loading\r\n});\r\n\r\nexport default connect(mapStateToProps, { locRequested })(CityDefault);","import CityListItem from './CityListItem';\r\n\r\nexport default CityListItem;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityListItem.scss';\r\nimport deleteIcon from './svg/delete.svg';\r\nimport { cityDelete } from \"../../actions\";\r\nimport Spinner from '../Spinner';\r\n\r\nconst CityListItem = ({ city, i, cityDelete }) => {\r\n  const [ loading, setLoading ] = useState(true);\r\n  const deleteCity = () => cityDelete(i);\r\n\r\n  useEffect(() => {\r\n    if(city && JSON.stringify(city) !== '{}'){\r\n      setLoading(false);}\r\n    else\r\n      setLoading(true);\r\n  }, [city]);\r\n\r\n  return (\r\n    <div className=\"city-list-item\">\r\n      {loading\r\n        ? <Spinner/>\r\n        : <div className=\"city-list-item\">\r\n          <div id=\"tab-info\">\r\n            <div id=\"tab-info-city\">\r\n              <div id=\"tab-info-city-text\">\r\n                {!city.error ? `${city.city} ${city.temp}°`: ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-icon\">\r\n              <div id=\"tab-info-icon-svg\">\r\n                {!city.error ? <img src={`https://dshtefan.github.io/weather-search-2/icons/${city.icon}.svg`} alt=\"\"/> : ''}\r\n              </div>\r\n            </div>\r\n            <div id=\"tab-info-delete\">\r\n              <div id=\"tab-info-delete-svg\">\r\n                <img src={deleteIcon} alt=\"\" onClick={deleteCity}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {city.error\r\n            ? <div className=\"error-message\">{city.error}</div>\r\n            :<div id=\"item-info\">\r\n              <div id=\"item-info-left\">\r\n                <div className=\"weather-info-line\">Pressure:</div>\r\n                <div className=\"weather-info-line\">Wind:</div>\r\n                <div className=\"weather-info-line\">Humidity:</div>\r\n                <div className=\"weather-info-line\">Coord.:</div>\r\n              </div>\r\n              <div id=\"item-info-right\">\r\n                <div className=\"weather-info-line\">{city.pressure} hPa</div>\r\n                <div className=\"weather-info-line\">{city.wind} m/s</div>\r\n                <div className=\"weather-info-line\">{city.humidity}%</div>\r\n                <div className=\"weather-info-line\">[{city.lat}, {city.lon}]</div>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect(null, { cityDelete })(CityListItem);","import InputBox from \"./InputBox\";\r\n\r\nexport default InputBox;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './InputBox.scss';\r\nimport { addCityToQueue } from \"../../actions\";\r\n\r\nconst InputBox = ({ addCityToQueue }) => {\r\n  const [ inputValue, setInputValue ] = useState('');\r\n\r\n  const handleChange = (event) =>\r\n    setInputValue(event.target.value);\r\n\r\n  const clickButton = (event) =>{\r\n    event.preventDefault();\r\n    setInputValue('');\r\n    addCityToQueue(inputValue);\r\n  };\r\n\r\n  return (\r\n    <div id=\"input-box-main\">\r\n      <div id=\"input-box\">\r\n        <form id=\"input-form\">\r\n          <input\r\n            id=\"input-field\"\r\n            onChange={handleChange}\r\n            value={ inputValue }\r\n          />\r\n          <button\r\n            id=\"search-button\"\r\n            onClick={clickButton}\r\n          >\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect( null, { addCityToQueue } )( InputBox );","import CityList from './CityList';\r\n\r\nexport default CityList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CityList.scss';\r\nimport CityListItem from '../CityListItem';\r\nimport InputBox from '../InputBox';\r\n\r\nconst CityList = ({ cities }) => {\r\n  return (\r\n    <div id=\"city-list\">\r\n      <InputBox />\r\n      <div className={\"city-list\"}>\r\n        {cities.map((el, i) => (<CityListItem city={el} key={i} i={i}/>))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = ({ frontCity, cities }) => ({\r\n  cities,\r\n  frontCity\r\n});\r\n\r\nexport default connect(mapStateToProps)(CityList);","import React from 'react';\r\nimport CityDefault from '../CityDefault';\r\nimport CityList from '../CityList';\r\nimport './MainPage.scss';\r\n\r\nconst MainPage = () =>\r\n  <div id={'main-page'}>\r\n    <CityDefault />\r\n    <CityList />\r\n  </div>;\r\n\r\nexport default MainPage;","import axios from 'axios';\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\n\r\nconst getWeatherByCoord = (lat, lon, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      appid: APIkey,\r\n      lat: lat,\r\n      lon: lon\r\n    }\r\n  });\r\n\r\nconst getWeatherByCityName = (cityName, APIkey) =>\r\n  axios.get(apiUrl, {\r\n    params: {\r\n      q: cityName,\r\n      appid: APIkey\r\n    }\r\n  });\r\n\r\n\r\nexport {\r\n  getWeatherByCoord,\r\n  getWeatherByCityName\r\n};","const dataDestructuring = weather => {\r\n  let {\r\n    name,\r\n    main: { temp, humidity, pressure },\r\n    weather: { 0: { main, icon } },\r\n    wind: { speed },\r\n    coord\r\n  } = weather;\r\n\r\n  temp = (temp - 273.15).toFixed(0);\r\n  icon = icon.substr(0, 2);\r\n\r\n  return {\r\n    city: name,\r\n    temp,\r\n    icon,\r\n    main,\r\n    pressure,\r\n    humidity,\r\n    wind: speed,\r\n    lon: coord.lon,\r\n    lat: coord.lat\r\n  }\r\n};\r\n\r\nexport default dataDestructuring;","const getGeoPosition = (successCallback, errorCallback) => {\r\n  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n};\r\n\r\nexport default getGeoPosition;","const saveToLocalStorage = ( { cities } ) => {\r\n  const citiesList = cities.map(( city ) => ({ city: city.city }));\r\n  localStorage.setItem('state', JSON.stringify({cities: citiesList}));\r\n};\r\n\r\nexport default saveToLocalStorage;","import { getWeatherByCityName } from \"./getWeather\";\r\nimport dataDestructuring from \"./weatherDataProcessing\";\r\n\r\nconst saveCityToStore = ( city, apiKey, cityLoaded, cityError, cityRequest ) => {\r\n  cityRequest();\r\n  getWeatherByCityName(city, apiKey)\r\n    .then((res) => {\r\n      cityLoaded(dataDestructuring(res.data));\r\n    })\r\n    .catch(() => {\r\n      cityError();\r\n    });\r\n};\r\n\r\nexport default saveCityToStore;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { MainPage } from '../Pages';\nimport { getWeatherByCityName, getWeatherByCoord } from \"../../utils/getWeather\";\nimport dataDestructuring from \"../../utils/weatherDataProcessing\";\nimport getGeoPosition from \"../../utils/getGeoPosition\";\nimport saveToLocalStorage from \"../../utils/saveToLocalStorage\";\nimport {\n  cityByCoordsLoaded,\n  cityError,\n  cityLoaded,\n  cityRequest, deleteCityFromQueue,\n  locError,\n  locLoaded,\n  locRequested,\n  updateLoadingStatus\n} from '../../actions';\nimport saveCityToStore from \"../../utils/saveCityToStore\";\n\nconst App = (props) => {\n  const {\n    deleteCityFromQueue,\n    cityError,\n    cityLoaded,\n    cityRequest,\n    locLoaded,\n    locError,\n    cityByCoordsLoaded,\n    updateLoadingStatus,\n    state\n  } = props;\n  const {\n    apiKey,\n    cityDefault,\n    isGeoPosAvailable,\n    cityByCoords,\n    cities,\n    citiesQueue\n  } = state;\n\n  const successGeoLocCallback = (pos) => {\n    const lat = pos.coords.latitude;\n    const lon = pos.coords.longitude;\n    locLoaded();\n    getWeatherByCoord(lat, lon, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      })\n      .catch((err) => {\n        cityByCoordsLoaded({error: err.message});\n      });\n  };\n\n  const errorGeoLocCallback = () => {\n    locError();\n    getWeatherByCityName(cityDefault, apiKey)\n      .then((res) => {\n        cityByCoordsLoaded(dataDestructuring(res.data));\n      })\n      .catch((err) => {\n        cityByCoordsLoaded({error: err.message});\n      });\n  };\n\n  useEffect(() => {\n    if(citiesQueue.length > 0){\n      if(cities.length < 4) {\n        saveCityToStore(citiesQueue[0], apiKey, cityLoaded, cityError, cityRequest);\n        deleteCityFromQueue();\n      } else {\n        deleteCityFromQueue();\n      }\n    }\n  }, [citiesQueue, cities, deleteCityFromQueue, apiKey, cityLoaded, cityRequest, cityError]);\n\n  useEffect(() => {\n    if(isGeoPosAvailable === null)\n      getGeoPosition(successGeoLocCallback, errorGeoLocCallback);\n  });\n\n  useEffect(() => {\n    if(cityByCoords && JSON.stringify(cityByCoords) !== '{}'){\n      updateLoadingStatus(false);}\n  }, [cityByCoords, updateLoadingStatus]);\n\n\n  useEffect(() => {\n    saveToLocalStorage(state);\n  }, [state]);\n\n  return (\n    <div id={'app'}>\n      <MainPage />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({state});\n\nconst mapDispatchToProps = {\n  cityLoaded,\n  cityRequest,\n  locError,\n  locLoaded,\n  locRequested,\n  cityByCoordsLoaded,\n  updateLoadingStatus,\n  cityError,\n  deleteCityFromQueue\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const storeTemplate = {\r\n  apiKey: '9c2f796d45e91e5c01a2ae26f1613625',\r\n  citiesQueue: [],\r\n  cities: [],\r\n  loading: true,\r\n  isGeoPosAvailable: null,\r\n  cityDefault: 'Moscow',\r\n  cityByCoords: {}\r\n};\r\n\r\nexport default storeTemplate;","import getLocalState from \"../utils/getLocalState\";\r\nimport storeTemplate from \"./storeTemplate\";\r\n\r\nconst localState = getLocalState();\r\n\r\nconst initialState =\r\n  localState\r\n    ? { ...storeTemplate, ...localState }\r\n    : storeTemplate;\r\n\r\nexport default initialState;","const getLocalState = () => {\r\n  const state = JSON.parse( localStorage.getItem('state') );\r\n  if (state === null)\r\n    return null;\r\n  const citiesQueue = state.cities.map( (city) => city.city );\r\n  return { citiesQueue };\r\n};\r\n\r\nexport default getLocalState;","import initialState from '../store/initialState'\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'ADD_CITY_TO_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.push(action.city);\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'DELETE_CITY_FROM_QUEUE': {\r\n      const citiesQueue = [...state.citiesQueue];\r\n      citiesQueue.shift();\r\n      return {\r\n        ...state,\r\n        citiesQueue\r\n      };\r\n    }\r\n    case 'UPDATE_LOADING_STATUS':\r\n      return {\r\n        ...state,\r\n        loading: action.loading\r\n      };\r\n    case 'DELETE_CITY':{\r\n      const cities = [...state.cities];\r\n      cities.splice(action.index, 1);\r\n      return {\r\n        ...state,\r\n        cities,\r\n        inputField: null\r\n      };\r\n    }\r\n    case 'FETCH_CITY_REQUEST':{\r\n      const cities = [...state.cities];\r\n      cities.push({});\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_ERROR':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities.splice(i, 1);\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_CITY_SUCCESS':{\r\n      const cities = [...state.cities];\r\n      const i = cities.filter((item) =>\r\n        (JSON.stringify(item) !== JSON.stringify({}))).length;\r\n      cities[i] = action.city;\r\n      return {\r\n        ...state,\r\n        cities\r\n      };\r\n    }\r\n    case 'FETCH_GEOLOCATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable,\r\n        loading: true\r\n      };\r\n    case 'FETCH_GEOLOCATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_GEOLOCATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        isGeoPosAvailable: action.isGeoPosAvailable\r\n      };\r\n    case 'FETCH_CITY_BY_COORDS_SUCCESS':{\r\n      return {\r\n        ...state,\r\n        cityByCoords: action.city\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App/App';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}